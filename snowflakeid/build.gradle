/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'signing'
    id "com.vanniktech.maven.publish" version "0.28.0"
}

group = 'io.github.henrypham67'
version = '0.1.0'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()

}

configurations {
    cucumberBom
    junitBom
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api libs.commons.math3

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation libs.guava

    testImplementation 'io.cucumber:cucumber-java:7.15.0'
    testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.15.0'
    testImplementation 'org.junit.platform:junit-platform-suite'
    testImplementation 'org.junit.jupiter:junit-jupiter'

}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

signing {
	useGpgCmd()
	sign publishing.publications
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

sourceSets {
    test {
        resources {
            srcDir 'specs'
        }
    }
}

test {
    testLogging {
        exceptionFormat = 'full'
        showExceptions = true
        showCauses = true
        showStackTraces = true
        events "passed", "skipped", "failed", "started"
        showStandardStreams = true
    }
}

import com.vanniktech.maven.publish.SonatypeHost

mavenPublishing {
  publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)
  signAllPublications()

  coordinates(group, "snowflakeid", version)

  pom {
    name = "Snowflake-id"
    description = "A description of what my library does."
    url = "https://github.com/henrypham67/snowflakeid/"
    licenses {
      license {
        name = "The Apache License, Version 2.0"
        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
        distribution = "http://www.apache.org/licenses/LICENSE-2.0.txt"
      }
    }
    scm {
      url = "https://github.com/henrypham67/snowflakeid"
      connection = "scm:git:git://github.com/henrypham67/snowflakeid.git"
      developerConnection = "scm:git:ssh://git@github.com/henrypham67/snowflakeid.git"
    }
  }
}